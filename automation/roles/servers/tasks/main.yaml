---
- name: Check VRF configured
  shell: dpkg-query -W -f='${Status}' vrf 
  register: vrf_check
  failed_when: no
  changed_when: no

- name: Install HWE kernel
  apt:
    name: linux-generic-hwe-16.04
    update_cache: yes
    install_recommends: yes
    state: present
  when: vrf_check.stdout.find('no packages found') == -1

- name: Install python packages for ifupdown2
  apt: name={{item}} state=present
  with_items:
    - python2.7
    - python-argcomplete
    - python-ipaddr
  when: vrf_check.stdout.find('no packages found') == -1

- name: Remove ifupdown1
  apt: name={{item}} state=absent
  with_items:
    - ifupdown
    - ifenslave
  when: vrf_check.stdout.find('no packages found') == -1

- name: Copy deb packages
  copy: src={{ item }} dest=/home/cumulus/ owner=cumulus
  with_fileglob:
    - files/*.deb
  when: vrf_check.stdout.find('no packages found') == -1

- name: Install ifupdown2 & Vrf tools
  apt: 
    deb: "{{item}}" 
    state: present 
  with_items:
    - /home/cumulus/ifupdown2_1.0~git20170314-1_all.deb
    - /home/cumulus/iproute2_4.14.1-1~bpo9+1_amd64.deb
    - /home/cumulus/vrf_1.2_all.deb
    - /home/cumulus/mgmt-vrf_1.2_all.deb
  when: vrf_check.stdout.find('no packages found') == -1

- name: Sysctl l3mdev_accept
  sysctl:
    name: net.ipv4.tcp_l3mdev_accept
    value: 1
    state: present
    reload: no
  when: vrf_check.stdout.find('no packages found') == -1

- name: L4 hash policy 
  sysctl:
    name: net.ipv4.fib_multipath_hash_policy
    value: 1
    state: present
    reload: no
  when: vrf_check.stdout.find('no packages found') == -1

- name: Copy interfaces configuration
  template:
    src: interfaces.j2
    dest: /etc/network/interfaces
    backup: yes
  when: vrf_check.stdout.find('no packages found') == -1

- name: Reboot server 
  shell: sleep 2 && shutdown -r now
  async: 1
  poll: 0
  when: vrf_check.stdout.find('no packages found') == -1

- name: Sleep for server to disconnect
  pause:
    seconds: 60 
  when: vrf_check.stdout.find('no packages found') == -1

- name: Wait for hosts to be up 
  wait_for:
    host: "{{ inventory_hostname }}"
    port: 22
    state: started
    delay: 15 
    timeout: 120
  ignore_errors: true
  when: vrf_check.stdout.find('no packages found') == -1

- name: Add Ansible Apt Key
  apt_key:
    id: 93C4A3FD7BB9C367
    keyserver: keyserver.ubuntu.com

- name: Add Ansible Repo
  apt_repository:
    repo: deb http://ppa.launchpad.net/ansible/ansible/ubuntu xenial main
    state: present
    update_cache: no

- name: Install Ansible
  apt:
    name: ansible 
    update_cache: yes

- name: Install Iperf
  apt:
    name: iperf3
    update_cache: yes

- name: Correct LLDP Settings
  lineinfile:
    dest: /etc/lldpd.d/port_info.conf
    line: "configure lldp portidsubtype ifname"
    create: yes
  notify: restart LLDP

- name: Apply LLDP Settings
  meta: flush_handlers

- name: Copy interfaces configuration
  template:
    src: interfaces.j2
    dest: /etc/network/interfaces
    backup: yes
  notify: reload networking

- name: Sleep for server to disconnect
  pause:
    seconds: 5

- name: Wait for hosts to be up
  wait_for:
    host: "{{ inventory_hostname }}"
    port: 22
    state: started
    delay: 15
    timeout: 120
  ignore_errors: true


- name: Ping to learn prefixes
  command: screen -dm ip vrf exec "{{ item.app }}" ping 192.168."{{ item.prefix }}"."{{ item.destination }}" -c 120
  loop:
    - { app: 'app1', prefix: '11', destination: '11'} 
    - { app: 'app1', prefix: '11', destination: '12'} 
    - { app: 'app1', prefix: '11', destination: '13'} 
    - { app: 'app1', prefix: '11', destination: '14'} 
    - { app: 'app1', prefix: '11', destination: '15'} 
    - { app: 'app1', prefix: '11', destination: '16'} 
    - { app: 'app3', prefix: '13', destination: '11'} 
    - { app: 'app3', prefix: '13', destination: '12'} 
    - { app: 'app3', prefix: '13', destination: '13'} 
    - { app: 'app3', prefix: '13', destination: '14'} 
    - { app: 'app3', prefix: '13', destination: '15'} 
    - { app: 'app3', prefix: '13', destination: '16'} 

- name: Ping6 to learn prefixes
  command: screen -dm ip vrf exec "{{ item.app }}" ping6 fc00:"{{ item.prefix }}"::"{{ item.destination }}" -c 120 
  loop:
    - { app: 'app1', prefix: '11', destination: '11'} 
    - { app: 'app1', prefix: '11', destination: '12'} 
    - { app: 'app1', prefix: '11', destination: '13'} 
    - { app: 'app1', prefix: '11', destination: '14'} 
    - { app: 'app1', prefix: '11', destination: '15'} 
    - { app: 'app1', prefix: '11', destination: '16'} 
    - { app: 'app3', prefix: '13', destination: '11'} 
    - { app: 'app3', prefix: '13', destination: '12'} 
    - { app: 'app3', prefix: '13', destination: '13'} 
    - { app: 'app3', prefix: '13', destination: '14'} 
    - { app: 'app3', prefix: '13', destination: '15'} 
    - { app: 'app3', prefix: '13', destination: '16'} 
...
